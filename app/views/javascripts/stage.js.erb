var ok_sheet
var login_sheet
var sources_sheet
var runner_sheet

var sources = []

var library_window

// 'Fix Firefox': if console object from firebug is not present, the scripts would not run.
// Fix: create an empty stub
if (! ("console" in window) || !("firebug" in console)) {
    var names = ["log", "debug", "info", "warn", "error", "assert", "dir", "dirxml", "group"
                 , "groupEnd", "time", "timeEnd", "count", "trace", "profile", "profileEnd"];
    window.console = {};
    for (var i = 0; i <names.length; ++i) window.console[names[i]] = function() {};
}

var toogle_library_window = function() {
  var width   = 400
  var height  = 300 
  var spacing = 20

  UI.Window.setOptions({
   show: function(el) { el.appear({ duration: 0.2 }) },
   hide: function(el) { el.fade({ duration: 0.2 }) }
  });

  if (library_window == undefined) {    
    library_window = new UI.Window({ 
      parent: 'container',
      theme: "black_hud", 
      resizable: true,
      id: 'library',
      shadow:false,
      height: 400,
      top: 200,
      width: 250, 
      left: 750, 
      superflousEffects: true,  
    }).setContent($('tools').innerHTML).setZIndex(1000).show()
  } else {
    if (library_window.getPosition().top < 0) {
      library_window.setPosition(10, library_window.getPosition().left)
    }
    library_window.visible ? library_window.hide() : library_window.show()    
  }
}



var init_tooltips = function() {
  var options = { 
      effect: 'appear', 
      hideAfter: true, 
      className: 'graphpipes', 
      fixed: true,
      delay: 0.9,
      hook: { target: 'bottomLeft', 
             tip: 'topLeft', 
             offset: {x: 5, y:5}
      }
  }
  
  $$('*[tooltip]').each( function(input) {
     var t = new Tip(input, input.readAttribute('tooltip'), options)
   });

}


var error = function(error) {
  error = error || 'Sorry! This Feature is not implemented yet.'
  $$('div.message h5').each(function(h) {
    h.innerHTML = error
  })
  
  ok_sheet.show()
}

var Patches = []

Event.observe(window, 'dom:loaded', function() {

    runner_sheet  = new Sheet($("runner_sheet"))
    ok_sheet      = new Sheet($("dummy_sheet"))
    login_sheet   = new Sheet($("login_sheet"))
    sources_sheet = new Sheet($("sources_sheet"))

    sources = [    
    <% current_user.sources.each_with_index do |s,i| %>
      { id: '<%= s.id %>', name: '<%= s.name %>', iri:  '<%= s.iri %>' }
      <% unless i == current_user.sources.length - 1 %> , <% end %>
    <% end %>
    ]    
    
   toogle_library_window()
   init_tooltips()
  
  $$('li.test_button').each(function(button) {
    button.observe('click', function() {
      Patches.push(new Patch(button, {id: button.id}))
    })
  })


  $('show_query').observe('click', function() {
    var header_text = $$('#runner_sheet div.status-message p').first()
    var content = $$('#runner_sheet div.status-message').first()
    // content.setStyle({height:'400px'})
    var parser     = new Parser(nodeBox.layer)
    var results = parser.collect_all_node_data()
    var query = results.toJSON()
    
    new Ajax.Request('<%= query_user_pipe_path(current_user, @id) %>', {
      asynchronous:true, 
      evalScripts:false, 
      method: 'post',
      parameters: {save: query },
                     
      onSuccess: function(transport) {    
        
        var response = (transport.responseText.evalJSON(true));   
        if (!response.success) {
          header_text.addClassName('error').innerHTML = "<pre><code>Could not generate your pipe!</code><pre>"
          return
        } else {
          header_text.addClassName('error').innerHTML =  response.query 
        }
        
        runner_sheet.show()                                  
        return false;
      },
      onFailure: function(transport) {   
        header_text.innerHTML = "<pre><code>Could not connect to server.</code><pre>"
        console.log('Could not connect to server.') 
        ok_sheet.show()                
      }
    });       
         
    return false
  })

  $('save').observe('click', function(){
    var header_text = $$('#dummy_sheet div.sheet_header h5').first()
    var parser     = new Parser(nodeBox.layer)
    var results = parser.collect_all_node_data()
    var query = results.toJSON()

       
    new Ajax.Request('<%= save_user_pipe_path(current_user, @id) %>', {
      asynchronous:true, 
      evalScripts:false, 
      method: 'post',
      parameters: {query: query },
                     
      onSuccess: function(transport) {    
        var response = (transport.responseText.evalJSON(true));   
        console.log('saved success')                 
        if (!response.success) {
          header_text.innerHTML = "<pre><code>Could not save your pipe!</code><pre>"
          return
        } else {
          header_text.innerHTML = "<pre><code>Saved your pipe.</code><pre>"
        }
        
        ok_sheet.show()                                  
        return false;
      },
      onFailure: function(transport) {   
        header_text.innerHTML = "<pre><code>Could not connect to server.</code><pre>"
        console.log('Could not connect to server.') 
        ok_sheet.show()                
      }
    });       
         
    return false
  })

  $('pipe_runner').observe('click', function(){
     runner_sheet.show()

     //saving data before run
     
     var parser     = new Parser(nodeBox.layer)
     var last_node  = parser.find_last_node()
     var results = parser.collect_all_node_data()
     var query = results.toJSON()
     
     new Ajax.Request('<%= run_user_pipe_path(current_user, @id) %>', {
              asynchronous:true, 
              evalScripts:true, 
              method: 'post',
              parameters: {save: query},
            
              onSuccess: function(transport) {    
                var response = (transport.responseText.evalJSON(true));   
                
                if (!response.success) {
                  var header_text = $$('#runner_sheet div.status-message p').first()
                  
                  header_text.addClassName('error').innerHTML = response.query + "<br><br><br>" + response.result || 'What? An Error!'
                  return
                } else {
                  var header_text = $$('#runner_sheet div.status-message p').first()
                  
                  $('visit-button').observe('click', function() {
                    runner_sheet.hide()
                    window.open(response.path)
                  })
                  
                  $('query-button').observe('click', function() {
                    runner_sheet.hide()
                    window.open(response.query_path)
                  })            
                  
                  $('visit-button').setStyle({visibility: 'visible'})
                  $('query-button').setStyle({visibility: 'visible'})
          
                  header_text.addClassName('error').innerHTML = 'Ok. All went well.'
                }
                return false;
              },
              onFailure: function(transport) {   
                console.log('Could not connect to server.') 
              }
            });       
     return false
   })
  
  $('add_rdf_button').observe('click', function(){
     new Ajax.Request('<%= user_sources_path(current_user)%>', {
        asynchronous:true, 
        evalScripts:true, 
        method: 'post',
        parameters:Form.serialize($('sources-form')),
  
        onSuccess: function(transport) {    
          var response = (transport.responseText.evalJSON(true));   
          
          if (!response.success) {
            var header_text = $$('#sources_sheet div.sheet_header h5').first()
            header_text.addClassName('error').innerHTML = response.error_message || 'Ups!'
            return
          } 
          
          sources.push({name: response.name, iri: response.iri})

          sources_sheet.hide(); 
          return false;
        },
        
        onFailure: function(transport) {
          header_text.addClassName('error').innerHTML = 'Could not connect to server.'    
          console.log('Could not connect to server.')
          sources_sheet.hide(); return false;             
        }
      });       
     return false
   })
  
 nodeBox.layer = new WireIt.Layer(window.boxes);
})

