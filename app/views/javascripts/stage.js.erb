var ok_sheet
var login_sheet
var sources_sheet
var runner_sheet

var sources = []

var library_window

// 'Fix Firefox': if console object from firebug is not present, the scripts would not run.
// Fix: create an empty stub
if (! ("console" in window) || !("firebug" in console)) {
    var names = ["log", "debug", "info", "warn", "error", "assert", "dir", "dirxml", "group"
                 , "groupEnd", "time", "timeEnd", "count", "trace", "profile", "profileEnd"];
    window.console = {};
    for (var i = 0; i <names.length; ++i) window.console[names[i]] = function() {};
}

var toogle_library_window = function() {
  var width   = 400
  var height  = 300 
  var spacing = 20

  UI.Window.setOptions({
   show: function(el) { el.appear({ duration: 0.2 }) },
   hide: function(el) { el.fade({ duration: 0.2 }) }
  });

  if (library_window == undefined) {    
    library_window = new UI.Window({ 
      parent: 'container',
      theme: "black_hud", 
      resizable: true,
      id: 'library',
      shadow:false,
      height: 400,
      top: 200,
      width: 250, 
      left: 750, 
      superflousEffects: true,  
    }).setContent($('tools').innerHTML).setZIndex(1000).show()
  } else {
    if (library_window.getPosition().top < 0) {
      library_window.setPosition(10, library_window.getPosition().left)
    }
    library_window.visible ? library_window.hide() : library_window.show()    
  }
}



var init_tooltips = function() {
  var options = { 
      effect: 'appear', 
      hideAfter: true, 
      className: 'graphpipes', 
      fixed: true,
      delay: 0.9,
      hook: { target: 'bottomLeft', 
             tip: 'topLeft', 
             offset: {x: 5, y:5}
      }
  }
  
  $$('*[tooltip]').each( function(input) {
     var t = new Tip(input, input.readAttribute('tooltip'), options)
   });

}


var error = function(error) {
  error = error || 'Sorry! This Feature is not implemented yet.'
  $$('div.message h5').each(function(h) {
    h.innerHTML = error
  })
  
  ok_sheet.show()
}

var Patches = []

Event.observe(window, 'dom:loaded', function() {

    runner_sheet  = new Sheet($("runner_sheet"))
    ok_sheet      = new Sheet($("dummy_sheet"))
    login_sheet   = new Sheet($("login_sheet"))
    sources_sheet = new Sheet($("sources_sheet"))

    sources = [    
    <% current_user.sources.each_with_index do |s,i| %>
      { name: '<%= s.name %>', iri: '12' }
      <% unless i == current_user.sources.length %> , <% end %>
    <% end %>
    ]    
    
   toogle_library_window()
   init_tooltips()
  
  $$('li.test_button').each(function(button) {
    button.observe('click', function() {
      Patches.push(new Patch(button, {id: button.id}))
    })
  })

// RUN PIPE
var parse_nodes = function() {
  
  var run = function() {
    var box = window.nodeBox
    
    var all_nodes = function() {
      return box.layer.containers
    }
    
    var find_last_node = function() {
     return all_nodes().inject(undefined, function(mem, node) {
        return node.config.element == 'node_last' ? node : mem
      }) 
    }

    var has_a_construct_node = function() {
      return all_nodes().inject(false, function(returning, container) {
        return (container.config.element == 'node_construct') ? true : returning
      })    
    }  
    
    var is_named_graph = function() {
      return has_a_construct_node() && construct_node_is_connected()
    }
    
    var construct_node_is_connected = function() {
      if (!has_a_construct_node()) { return false }
      if (!tree_exists(find_last_node())) { return false }
    
      // check both directions
      var node1 = find_last_node().wires.first().terminal1.nodeBox.config.element
      var node2 = find_last_node().wires.first().terminal1.nodeBox.config.element
            
      return node1 == 'node_construct' || node2 == 'node_construct'
    }
    
    var collect_all_node_results = function() {
      return all_nodes().inject([], function(results, node) {
        results.push({kind: node.config.element, result: node.result() })
        return results
      })
    }

    var tree_exists = function(node) {
      return node == undefined ? false : node.wires != undefined && node.wires.length > 0 
    }
    
    var has_no_children = function(node) {
      var node_is_me = node.wires[0].terminal1.NodeBox == node || (node.wires[1] != undefined && node.wires[1].terminal1.NodeBox == node)
      var no_otherwire_exists = (node.wires[0] == undefined || node.wires[0].terminal1.Node.wires == undefined) && 
                                (node.wires[1] == undefined || node.wires[1].terminal1.Node.wires == undefined)
      
      return !node_is_me || node_is_me
    }
    
    var parse = function(a_node) {
      var results = []
      
      if (!tree_exists(a_node)) { return {id:0,result:0} }
          
      a_node.terminals.each(function(terminal) {
        var node = terminal.wires.each(function(wire) {
          other_node = wire.getOtherTerminal().nodeBox
          
          if (has_no_children(other_node)) {
            results.push({id: node.config.node_id, result: node.result()})            
          } else {
            results += parse(other_node)
          }              
        })
      })
      return results
    }
    
    var collect_tree_results = function() {
      if (!tree_exists(find_last_node())) { return [] }
      return parse(find_last_node())
    }
     
    collect_tree_results()
  }
  
  run()
  
  return "select x from {x} <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> {<http://www.w3.org/2002/07/owl#Class>}"
  
  // box.layer.containers
    // - config
    // - terminals
    // - className
    // - position
    
  // box.layer.Terminal
    // - container
    // - wires
    // - direction
    // - fakeDirection
    // - className
    // - config
    
  // box.layer.Wire
    // - terminal1
    // - terminal2
    // - config
    
  // Parse Tree
    // recursiv 
    // unless found_container.includes(new_container)
    
    // find rdf nodes || or nodes without parent3
    // forEach: 
    //    |node|
    //    node.terminals.forEach
    //        |terminal|
    //        terminal.container
    
    // box.layer.containers.each(function(container) {
    //           container.terminal
    // })
}



  $('show_query').observe('click', function() {
    var header_text = $$('#dummy_sheet div.sheet_header h5').first()
    header_text.innerHTML = "<pre><code>" + parse_nodes() + "</code></pre>"
    ok_sheet.show()
  })

  $('pipe_runner').observe('click', function(){
    runner_sheet.show()
    // parse_nodes() 
    new Ajax.Request('<%= run_user_pipe_path(current_user, @id) %>', {
        asynchronous:true, 
        evalScripts:true, 
        method: 'post',
        parameters: {query: parse_nodes()},
      
        onSuccess: function(transport) {    
          var response = (transport.responseText.evalJSON(true));   
          
          if (!response.success) {
            var header_text = $$('#runner_sheet div.status-message p').first()
            header_text.addClassName('error').innerHTML = response.error_message || 'What? An Error!'
            return
          } else {
            var header_text = $$('#runner_sheet div.status-message p').first()
            
            $('visit-button').observe('click', function() {
              runner_sheet.hide()
              window.open(response.path)
            })
            
            $('query-button').observe('click', function() {
              runner_sheet.hide()
              window.open(response.query_path)
            })            
            
            $('visit-button').setStyle({visibility: 'visible'})
            $('query-button').setStyle({visibility: 'visible'})
    
            header_text.addClassName('error').innerHTML = 'Ok. All went well.'
          }
          return false;
        },
        onFailure: function(transport) {   
          console.log('Could not connect to server.') 
        }
      });       
     return false
   })
  
  $('add_rdf_button').observe('click', function(){
     new Ajax.Request('<%= user_sources_path(current_user)%>', {
        asynchronous:true, 
        evalScripts:true, 
        method: 'post',
        parameters:Form.serialize($('sources-form')),
  
        onSuccess: function(transport) {    
          var response = (transport.responseText.evalJSON(true));   
          
          if (!response.success) {
            var header_text = $$('#sources_sheet div.sheet_header h5').first()
            header_text.addClassName('error').innerHTML = response.error_message || 'Ups!'
            return
          } 
          sources.push({name: response.name, iri: response.iri})

          
          sources_sheet.hide(); 
          return false;
        },
        
        onFailure: function(transport) {
          header_text.addClassName('error').innerHTML = 'Could not connect to server.'    
          console.log('Could not connect to server.')
          sources_sheet.hide(); return false;             
        }
      });       
     return false
   })
  
 nodeBox.layer = new WireIt.Layer(window.boxes);
})

